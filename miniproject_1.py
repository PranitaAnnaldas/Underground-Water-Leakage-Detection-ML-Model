# -*- coding: utf-8 -*-
"""MiniProject_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eyC-WQPRbi6Mq41JvD3CsdU0YHCuI6N1

# Logistic Regression
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

data = pd.read_excel('ML_data.xlsx')
data

X= data[['in_volume','out_volume','consumption','in_pressure','out_pressure','in_flowrate','out_flowrate'] ]
y= data['output']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

import seaborn as sn
confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)

from sklearn.metrics import precision_score, recall_score, f1_score
precision = precision_score(y_test, y_pred, pos_label='leak')
print("Precision: ",precision)

recall = recall_score(y_test, y_pred, pos_label='leak')
print("Recall: ",recall)

f1 = f1_score(y_test, y_pred, pos_label='leak')
print("F1 Score: ",f1)

"""Testing"""

dataset = pd.read_excel("Final_Test_1.xlsx")
dataset

com_test= dataset[['in_volume','out_volume','consumption','in_pressure','out_pressure','in_flowrate','out_flowrate'] ]

scaler = StandardScaler()
com_test1 = scaler.fit_transform(com_test)

predictions_com = model.predict(com_test1)

predictions_com

dataset['output'] = predictions_com

dataset

import pandas as pd

file_path = 'D:\Mini Project.xlsx'

# Convert DataFrame to Excel
dataset.to_excel(file_path, index=False)  # Set index=False if you don't want the DataFrame index to be included in the Excel file

from google.colab import files

files.download(file_path)

"""# Decision tree"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

data = pd.read_excel("ML_data.xlsx")

data

X= data[['in_volume','out_volume','consumption','in_pressure','out_pressure','in_flowrate','out_flowrate'] ]
y= data['output']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier()

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

import seaborn as sn
confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)

from sklearn.metrics import precision_score, recall_score, f1_score
precision = precision_score(y_test, y_pred, pos_label='leak')
print("Precision: ",precision)

recall = recall_score(y_test, y_pred,pos_label='leak')
print("Recall: ",recall)

f1 = f1_score(y_test, y_pred,pos_label='leak')
print("F1 Score: ",f1)

"""Testing"""

dataset = pd.read_excel("Final_Test_1.xlsx")
dataset

com_test= dataset[['in_volume','out_volume','consumption','in_pressure','out_pressure','in_flowrate','out_flowrate'] ]

predict = clf.predict(com_test)

predict

dataset['output']=predict

dataset

"""# SVM"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

data = pd.read_excel("ML_data.xlsx")

X= data[['in_volume','out_volume','consumption','in_pressure','out_pressure','in_flowrate','out_flowrate'] ]
y= data['output']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = SVC()

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

import seaborn as sn
confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)

from sklearn.metrics import precision_score, recall_score, f1_score
precision = precision_score(y_test, y_pred,pos_label='leak')
print("Precision: ",precision)

recall = recall_score(y_test, y_pred,pos_label='leak')
print("Recall: ",recall)

f1 = f1_score(y_test, y_pred,pos_label='leak')
print("F1 Score: ",f1)

"""Tesing"""

dataset = pd.read_excel("Final_Test_1.xlsx")
dataset

com_test= dataset[['in_volume','out_volume','consumption','in_pressure','out_pressure','in_flowrate','out_flowrate'] ]

predict = clf.predict(com_test)

predict

dataset['output'] = predict

dataset

"""# Random Forest"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_excel('ML_data.xlsx')
data

X= data[['in_volume','out_volume','consumption','in_pressure','out_pressure','in_flowrate','out_flowrate'] ]
y= data['output']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
X_train = sc_x.fit_transform(X_train)
X_test = sc_x.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 100)
classifier.fit(X_train, y_train)

y_pred=classifier.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test,y_pred)
print("Accuracy:",accuracy)

import seaborn as sn
confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)

from sklearn.metrics import precision_score, recall_score, f1_score
precision = precision_score(y_test, y_pred, pos_label='leak')
print("Precision: ",precision)

recall = recall_score(y_test, y_pred, pos_label='leak')
print("Recall: ",recall)

f1 = f1_score(y_test, y_pred, pos_label='leak')
print("F1 Score: ",f1)

"""Testing"""

dataset = pd.read_excel("Final_Test_1.xlsx")
dataset

com_test= dataset[['in_volume','out_volume','consumption','in_pressure','out_pressure','in_flowrate','out_flowrate' ]]

from sklearn.preprocessing import StandardScaler
sc_com = StandardScaler()
com_test = sc_com.fit_transform(com_test)

com_pred=classifier.predict(com_test)

com_pred